--https://stackoverflow.com/questions/26952960/vhdl-counter-timer
component timer is
    GENERIC(
        clk_freq    : INTEGER := 50_000_000;  --system clock frequency in Hz
        constant TIMER_MAX  : POSITIVE      := 60 * 1000 * 1000 - 1;
        constant TIMER_BITS : POSITIVE      := log2ceil(TIMER_MAX)
        );         
      PORT(
        clk     : IN  STD_LOGIC;  --input clock
        reset: IN  STD_LOGIC;  --asynchronous active low reset
        result  : OUT STD_LOGIC); --debounced signal
end component;


signal reset        : STD_LOGIC     := '0'; -- disabled reset; TODO move this signal to port
---------------------------------------------------------------
function log2ceil(arg : positive) return natural is
    variable tmp : positive     := 1;
    variable log : natural      := 0;
begin
    if arg = 1 then return 0; end if;
    while arg > tmp loop
        tmp := tmp * 2;
        log := log + 1;
    end loop;
    return log;
end function;
---------------------------------------------------------------
function to_sl(condition : BOOLEAN) return STD_LOGIC is
begin
    if condition then
        return '1';
    else
        return '0';
    end if;
end function;
---------------------------------------------------------------

constant TIMER_MAX  : POSITIVE      := 60 * 1000 * 1000 - 1;
constant TIMER_BITS : POSITIVE      := log2ceil(TIMER_MAX);

signal timer_rst    : STD_LOGIC;
signal timer_us     : UNSIGNED(TIMER_BITS - 1 downto 0) := (others => '0');
signal timer_tick   : STD_LOGIC;


timer_rst  <= reset or timer_tick;

process(clk)
begin
  if rising_edge(clk) then
    if (timer_rst = '1') then
      timer <= (others => '0');
    else
      timer <= timer + 1;
    end if;
  end if;
end process;

timer_tick <= to_sl(timer = TIMER_MAX - 1));